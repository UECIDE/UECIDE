<?xml version="1.0"?>
<project name="uecide" default="build">
  <!--echo message="os.name = ${os.name}" /-->
  <!--echo message="os.arch = ${os.arch}" /-->
  <!--echo message="os.version = ${os.version}" /-->
  <!-- Sets properties for macosx/windows/linux depending on current system -->
    <!--property name="theme" value="mpide"/-->
    <property file="build.settings"/>
    <property name="aws.bucket" value="chipkit" />

    <property file="themes/${theme}/ide/theme.txt"/>

 <condition property="macosx"><os family="mac" /></condition>
  <condition property="windows"><os family="windows" /></condition>
  <condition property="linux"><os family="unix" /></condition>
  <condition property="linux64"><os family="unix" arch="amd64" /></condition>

<condition property="platform" value="macosx">
	<os family="mac" />
</condition>
<condition property="platform" value="windows">
	<os family="windows" />
</condition>
  <condition property="platform"  value="linux">
	<os family="unix" arch="i386" />
</condition>
<condition property="platform" value="linux64">
	<os family="unix" arch="amd64" />
</condition>

    <!-- set time propert -->  
    <tstamp>
        <format property="TODAY" pattern="yyyyMMdd" />
    </tstamp>

  <!-- Libraries required for running IDE -->
  <fileset dir=".." id="runtime.jars">
    <include name="core/core.jar" />
    <include name="app/uecide.jar" />
    <include name="app/lib/ecj.jar" />
    <include name="app/lib/jna.jar" />
    <include name="app/lib/RXTXcomm.jar" />
    <include name="app/lib/ant.jar" />
    <include name="app/lib/ant-launcher.jar" />
    <include name="app/lib/log4j-1.2.16.jar" />
    <include name="app/lib/log4j.properties" />
  </fileset>

  <target name="build" description="Build IDE.">
    <antcall target="${platform}-build" />
  </target>

  <target name="run" description="Run IDE.">
    <antcall target="${platform}-run" />
  </target>
  
  <target name="win-debug" description="Run IDE from Java." depends="build">
      <java dir="./${platform}/work"
          classpath="${platform}/work/lib:${platform}/work/lib/RXTXcomm.jar:${platform}/work/lib/core.jar:${platform}/work/lib/ecj.jar:${platform}/work/lib/jna.jar:${platform}/work/lib/log4j-1.2.16.jar:${platform}/work/lib/uecide.jar"
          fork="true"
          jar="./${platform}/work/lib/uecide.jar">
    </java>
  </target>

   <target name="linux-debug" description="Run IDE from Java." depends="build">
      <java dir="./${platform}/work"
          classpath="${platform}/work/lib:${platform}/work/lib/RXTXcomm.jar:${platform}/work/lib/core.jar:${platform}/work/lib/ecj.jar:${platform}/work/lib/jna.jar:${platform}/work/lib/log4j-1.2.16.jar:${platform}/work/lib/uecide.jar"
          fork="true"
          jar="./${platform}/work/lib/uecide.jar">
    </java>
  </target>


    <target name="version-number" description="Get the version number">
        <input message="Enter version number:" 
        addproperty="version"
        defaultvalue="${revision}-${TODAY}-${platform}" />
    </target>

    <target name="dist" depends="version-number"
          description="Build IDE for distribution.">
        <antcall target="${platform}-dist" />
    </target>

    <target name="deb" description="Build IDE for distribution.">
        <antcall target="${platform}-deb" />
    </target>


  <target name="dist-test" 
          description="Build IDE for distribution.">
    <input message="Enter version number:"
           addproperty="version"
           defaultvalue="${revision}-${platform}-${TODAY}-test" />
    <antcall target="${platform}-dist" />
  </target>

  <target name="deb-test" 
          description="Build IDE for distribution.">
    <input message="Enter version number:"
           addproperty="version"
           defaultvalue="${revision}-${platform}-${TODAY}-test" />
    <antcall target="${platform}-deb" />
  </target>

  <!-- "ยง$ยง$&, ant doesn't have a built-in help target :(  -->
  <target name="help" description="Show project help">
    <java classname="org.apache.tools.ant.Main">
      <arg value="-p" />
    </java>
  </target>

  <!-- - - - - - - - - - - - - - - - - - -->
  <!-- Subprojects: Core, App, Libraries -->
  <!-- - - - - - - - - - - - - - - - - - -->

  <target name="subprojects-clean">
    <subant buildpath="../core" target="clean"/>
    <subant buildpath="../app" target="clean"/>
    <subant buildpath="../plugins" target="clean"/>
  </target>

  <target name="subprojects-build">
    <subant buildpath="../core" target="build"/>
    <subant buildpath="../app" target="build"/>
    <subant buildpath="../plugins" target="build"/>
  </target>


  <!-- - - - - - - - - -->
  <!-- Basic Assembly  -->
  <!-- - - - - - - - - -->

    <target name="download-file" if="download.enable">
        <get src="${src}" dest="${dest}" usetimestamp="true" />    
    </target>

    <target name="install_core" if="core.${core.name}">
        <antcall target="download-file">
            <param name="src" value="http://www.uecide.org/cores/${core.name}-${target.platform}-current.zip" />
            <param name="dest" value="tmp/${core.name}-${target.platform}-current.zip" />
        </antcall>
        <unzip dest="${target.path}/hardware/cores" src="tmp/${core.name}-${target.platform}-current.zip" overwrite="false" />
        <chmod perm="+x">
            <fileset dir="${target.path}/hardware/cores/${core.name}" includes="**/*" />
        </chmod>
    </target>

    <target name="install_plugin" if="plugin.${plugin}">
        <copy file="../plugins/${plugin}/${plugin}.jar" todir="${target.path}/plugins/"/>
    </target>

    <target name="install_boards" if="boards.${boards.name}">
        <antcall target="download-file">
            <param name="src" value="http://www.uecide.org/boards/boards-${boards.name}-current.zip" />
            <param name="dest" value="tmp/boards-${boards.name}-current.zip" />
        </antcall>
        <unzip dest="${target.path}/hardware/boards/${boards.name}" src="tmp/boards-${boards.name}-current.zip" overwrite="false" />
        <chmod perm="+x">
            <fileset dir="${target.path}/hardware/boards/${boards.name}" includes="**/*" />
        </chmod>
    </target>
        
    <target name="assemble">
        <fail unless="target.path" 
            message="Do not call assemble from the command line." />

        <!-- Install selected cores -->
        <antcall target="install_core">
            <param name="core.name" value="avr105" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_core">
            <param name="core.name" value="pic32" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_core">
            <param name="core.name" value="msp430" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <!-- Install selected boards -->
        <antcall target="install_boards">
            <param name="boards.name" value="Arduino" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_boards">
            <param name="boards.name" value="Cerebot" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_boards">
            <param name="boards.name" value="CUI32" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_boards">
            <param name="boards.name" value="Majenko" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_boards">
            <param name="boards.name" value="MicroElektronika" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_boards">
            <param name="boards.name" value="PONTECH" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_boards">
            <param name="boards.name" value="chipKIT" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_boards">
            <param name="boards.name" value="Fubarino" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_boards">
            <param name="boards.name" value="Microchip" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_boards">
            <param name="boards.name" value="Olimex" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_boards">
            <param name="boards.name" value="UBW32" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_boards">
            <param name="boards.name" value="Launchpad" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_plugin">
            <param name="plugin" value="Archiver" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_plugin">
            <param name="plugin" value="AutoFormat" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_plugin">
            <param name="plugin" value="ColorSelector" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_plugin">
            <param name="plugin" value="ConvertWaveFile" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_plugin">
            <param name="plugin" value="CreateFont" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_plugin">
            <param name="plugin" value="ExportToMPLABX" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_plugin">
            <param name="plugin" value="FixEncoding" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <antcall target="install_plugin">
            <param name="plugin" value="SerialTerminal" />
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </antcall>

        <!-- copy shared examples folder -->
        <copy todir="${target.path}/examples">
            <fileset dir="shared/examples" />
        </copy>
    
        <!-- Unzip documentation -->
        <unzip dest="${target.path}" src="shared/reference.zip" overwrite="false"/>

        <copy todir="${target.path}/lib/theme/">
            <fileset dir="themes/${theme}/ide/" includes="**/*"/>
        </copy>
    
        <!-- Write the revision file! -->
        <echo file="${target.path}/lib/version.txt" message="${version}" />
    </target>

  
  <!-- - - - - - - - -->
  <!-- Mac OS X      -->
  <!-- - - - - - - - -->

  <target name="macosx-clean" depends="subprojects-clean" description="Clean Mac OS X build">
    <delete dir="macosx/work" />
    <delete dir="macosx/working_dir" />
    <delete dir="macosx/working.dmg" />
    <delete file="macosx/${product}-*.dmg" />
  </target>
  
  <target name="macosx-checkos" unless="macosx">
    <echo>
      =======================================================
      ${product.cap} for Mac OS X can only be built on Mac OS X.
      
      Bye. 
      =======================================================
    </echo>
    <fail message="wrong platform (${os.name})" />
  </target>
  
  <target name="macosx-build" depends="subprojects-build" description="Build Mac OS X version">
    	<mkdir dir="macosx/work" />
    
    <!-- assemble the uecide -->
    <copy todir="macosx/work">
      <fileset dir="macosx/" includes="template.app/**"/>
    </copy>

    
<!--    <rename src="macosx/work/template.app" 
	    dest="macosx/work/${product.cap}.app" />-->
    <move file="macosx/work/template.app" 
	  tofile="macosx/work/${product.cap}.app" />

    <replace file="macosx/work/${product.cap}.app/Contents/Info.plist" token="{product.cap}" value="${product.cap}" />
    <replace file="macosx/work/${product.cap}.app/Contents/Info.plist" token="{version}" value="${version}" />

    <copy file="themes/${theme}/ide/icon.icns" tofile="macosx/work/${product.cap}.app/Contents/Resources/processing.icns" overwrite="true" />

    <chmod file="macosx/work/${product.cap}.app/Contents/MacOS/JavaApplicationStub" perm="755" />
    
    <copy todir="macosx/work/${product.cap}.app/Contents/Resources/Java" flatten="true">
      <fileset refid="runtime.jars"/>
    </copy>
    
    <copy todir="macosx/work/${product.cap}.app/Contents/Resources/Java">
      <fileset dir="shared" includes="lib/**" />
      <fileset file="shared/revisions.txt" />
    </copy>

    <antcall target="assemble">
      <param name="target.path" value="macosx/work/${product.cap}.app/Contents/Resources/Java" />
      <param name="target.platform" value="macosx" />
    </antcall>
  </target>

  <target name="macosx-run" depends="macosx-build" description="Run Mac OS X version">
    <exec executable="macosx/work/${product.cap}.app/Contents/MacOS/JavaApplicationStub" spawn="true"/>
  </target>

  <target name="macosx-debug" depends="macosx-build" description="Run Mac OS X version">
    <exec executable="macosx/work/${product.cap}.app/Contents/MacOS/JavaApplicationStub" spawn="false"/>
  </target>

    <target name="macosx-mkdmg-linux64">
        <antcall target="macosx-mkdmg-linux" />
    </target>

    <target name="macosx-mkdmg-linux">
        <exec executable="genisoimage">
            <arg value="-D" />
            <arg value="-V" />
            <arg value="${product.cap}" />
            <arg value="-no-pad" />
            <arg value="-r" />
            <arg value="-apple" />
            <arg value="-o" />
            <arg value="macosx/${product}-${version}-macosx.dmg" />
            <arg value="macosx/work" /> 
        </exec>
    </target>

    <target name="macosx-mkdmg-macosx">
        <exec executable="macosx/mkdmg">
            <arg value="macosx/work" />
            <arg value="${product.cap}" />
			<arg value="macosx/${product}-${version}-macosx.dmg" />
        </exec>
    </target>

  <target name="macosx-dist" depends="macosx-build" description="Create a .dmg of the Mac OS X version">

    <!-- now build the dmg -->
    <antcall target="macosx-mkdmg-${platform}" />

    <zip destfile="macosx/${product}-${version}-macosx.zip"
         basedir="macosx"
         includes="${product}-${version}-macosx.dmg" />

    <echo>
      =======================================================
      ${product.cap} for Mac OS X was built. Grab the image from   
      
      macosx/${product}-${version}.zip
      =======================================================
  </echo>

  </target>

  
  <!-- - - - - - - - -->
  <!-- Linux         -->
  <!-- - - - - - - - -->
  
  <target name="linux-clean" depends="subprojects-clean" description="Clean linux version">
    <delete dir="linux/work" />
  </target>
  
  <target name="linux-checkos" unless="linux">
    <echo>
      =======================================================
      ${product.cap} for Linux can only be built on on unix systems.
      
      Bye. 
      =======================================================
    </echo>
    
    <fail message="wrong platform (${os.name})" />
  </target>
  
  <target name="linux-build" depends="linux-checkos, subprojects-build" description="Build linux version">
    <mkdir dir="linux/work" />
    
    <copy todir="linux/work">
      <fileset dir="shared" includes="lib/**" />
      <fileset file="shared/revisions.txt" />
    </copy>
    
    <copy todir="linux/work">
      <fileset dir="linux/dist" includes="lib/**" />
    </copy>

    <copy todir="linux/work/lib" flatten="true">
      <fileset refid="runtime.jars" />
    </copy>
    
    <antcall target="assemble">
      <param name="target.path" value="linux/work" />
      <param name="target.platform" value="linux" />
    </antcall>

    <copy tofile="linux/work/${product}" file="linux/dist/linuxrunner" />
    <chmod perm="755" file="linux/work/${product}" />
  </target>

    <target name="linux32-build" depends="linux-build" description="Build linux (32-bit) version">
    </target>

    <target name="linux64-build" depends="linux-checkos, subprojects-build" description="Build linux (64-bit) version">
        <mkdir dir="linux/work" />
    
        <copy todir="linux/work">
          <fileset dir="shared" includes="lib/**" />
          <fileset file="shared/revisions.txt" />
        </copy>
        
        <copy todir="linux/work">
          <fileset dir="linux/dist" includes="lib/**" />
        </copy>

        <copy todir="linux/work/lib" flatten="true">
          <fileset refid="runtime.jars" />
        </copy>
        
        <antcall target="assemble">
          <param name="target.path" value="linux/work" />
          <param name="target.platform" value="linux64" />
        </antcall>

        <copy tofile="linux/work/${product}" file="linux/dist/linuxrunner" />
        <chmod perm="755" file="linux/work/${product}" />
        <copy tofile="linux/work/lib/librxtxSerial.so" file="linux/dist/lib/librxtxSerial64.so" overwrite="true" />   
    </target>
  
  <target name="linux-run" depends="linux-build" 
	  description="Run Linux (32-bit) version">
    <exec executable="./linux/work/${product}" spawn="false"/>
  </target>
  
  <target name="linux64-run" depends="linux64-build" 
	  description="Run Linux (64-bit) version">
    <exec executable="./linux/work/${product}" spawn="false"/>
  </target>

    <target name="linux-dist" depends="linux-build" 
        description="Build .tar.gz of linux version">
        <property name="extension" value="tgz"/> 


        <zip destfile="linux/${product}-${version}-linux.zip">
            <zipfileset dir="linux/work" prefix="${product}-${version}" filemode="755"/>
        </zip>

        <echo>
      =======================================================
      ${product.cap} for Linux was built. Grab the archive from   
      
      build/linux/${product}-${version}-linux.zip
      =======================================================
        </echo>
    </target>

    <target name="linux64-dist" depends="linux64-build" 
        description="Build .tar.gz of linux64 version">
        <property name="extension" value="tgz"/> 


        <zip destfile="linux/${product}-${version}-linux64.zip">
            <zipfileset dir="linux/work" prefix="${product}-${version}" filemode="755"/>
        </zip>

        <echo>
      =======================================================
      ${product.cap} for Linux was built. Grab the archive from   
      
      build/linux/${product}-${version}-linux64.zip
      =======================================================
        </echo>
    </target>

	<target name="linux-generate-debian" depends="version-number, build" description="Build debian tree ready for packaging">
        <property name="proot" value="linux/${product}-${version}-${arch}" />
        <mkdir dir="${proot}" />
        <mkdir dir="${proot}/usr" />
        <mkdir dir="${proot}/usr/bin" />
        <mkdir dir="${proot}/usr/share" />
        <mkdir dir="${proot}/usr/share/applications" />
        <mkdir dir="${proot}/usr/share/icons" />

        <copy tofile="${proot}/usr/share/icons/${product}.png" file="themes/${theme}/ide/icon.png" />
        <copy tofile="${proot}/usr/share/icons/${product}_sketch.png" file="themes/${theme}/ide/doc_icon.png" />

        <copy todir="${proot}/usr/share/${product}">
            <fileset dir="linux/work" />
        </copy>
        <chmod perm="755">
            <fileset dir="${proot}/usr/share/${product}" includes="${product}" />
            <fileset dir="${proot}/usr/share/${product}/hardware" includes="**/*" />
        </chmod>
        <symlink link="${proot}/usr/bin/${product}" resource="/usr/share/${product}/${product}" overwrite="true" />

        <echo file="${proot}/usr/share/applications/${product}.desktop">[Desktop Entry]
Name=${product.cap}
Comment=IDE for ${product.cap}
Exec=/usr/bin/${product}
Icon=${product}.png
Terminal=false
Type=Application
Categories=Application;Development;Programming;
StartupNotify=false
MimeType=application/x-${product}
</echo>

        <echo file="${proot}/usr/share/${product}/${product}-mime.xml">&lt;?xml version="1.0"?&gt;
&lt;mime-info xmlns='http://www.freedesktop.org/standards/shared-mime-info'&gt;
    &lt;mime-type type="application/x-${product}"&gt;
        &lt;comment&gt;${product.cap} Sketch&lt;/comment&gt;
        &lt;glob pattern="*.pde"/&gt;
        &lt;glob pattern="*.ino"/&gt;
    &lt;/mime-type&gt;
&lt;/mime-info&gt;
</echo>

        <mkdir dir="${proot}/DEBIAN" />
        <echo file="${proot}/DEBIAN/control">Package: ${product}
Version: ${version}
Maintainer: matt@majenko.co.uk
Architecture: ${arch}
Section: Programming
Depends: avr-libc, avrdude, binutils-avr, extra-xdg-menus, gcc-avr, libftdi1, libjna-java, librxtx-java
Description: chipKIT MPIDE Development environment

</echo>
        <echo file="${proot}/DEBIAN/postinst">#!/bin/bash
xdg-mime install --novendor /usr/share/${product}/${product}-mime.xml
xdg-icon-resource install --context mimetypes --novendor --size 128 /usr/share/icons/${product}_sketch.png application-x-${product}
xdg-icon-resource install --size 128 --novendor /usr/share/icons/${product}.png
</echo>
        <chmod perm="755">
            <fileset dir="${proot}/DEBIAN" includes="postinst" />
        </chmod>
        <exec executable="fakeroot" dir="linux">
            <arg value="dpkg-deb"/>
            <arg value="-b"/>
            <arg value="${product}-${version}-${arch}"/>
        </exec>
        <delete dir="${proot}" />
        <echo>
      =======================================================
      ${product.cap} for Linux was built. Grab the package from   
      
      build/linux/${product}-${version}-${arch}.deb
      =======================================================
        </echo>
    </target>


	<target name="linux-deb" description="Build .deb of linux version">
        <property name="extension" value="deb"/>
        <property name="arch" value="i386"/>
        <antcall target="linux-generate-debian"/>
    </target>

    <target name="linux64-deb" description="Build .deb of linux version">
        <property name="arch" value="amd64"/>
        <property name="extension" value="deb"/>
        <antcall target="linux-generate-debian"/>
    </target>


  
  <!-- - - - - - - - -->
  <!-- Windows       -->
  <!-- - - - - - - - -->
  
  <target name="windows-clean" depends="subprojects-clean"
	  description="Clean windows version">
    <delete dir="windows/work" />
  </target>
  
  <target name="windows-checkos" unless="windows">
    <echo>
      =======================================================
      ${product.cap} for Windows can only be built on windows.
      
      Bye. 
      =======================================================
    </echo>
    
    <fail message="wrong platform (${os.name})" />
  </target>
  
    <target name="windows-build" 
        depends="subprojects-build" 
        description="Build windows version">
        <mkdir dir="windows/work" />
    
        <!-- assemble the uecide -->
        <mkdir dir="windows/work/lib" />
        <copy todir="windows/work/lib" flatten="true">
            <fileset refid="runtime.jars" />
        </copy>
    
        <copy todir="windows/work">
            <fileset dir="shared" includes="lib/**" />
            <fileset file="shared/revisions.txt" />
        </copy>
    
        <copy todir="windows/work">
            <fileset dir="windows/dist" includes="*.dll" />
        </copy>

        <copy todir="windows/work">
            <fileset dir="windows/dist" includes="drivers/**" />
        </copy>

        <antcall target="assemble">
            <param name="target.path" value="windows/work" />
            <param name="target.platform" value="windows" />
        </antcall>

        <property name="launch4j.dir" value="windows/launcher/launch4j/" />
        <taskdef name="launch4j" 
            classname="net.sf.launch4j.ant.Launch4jTask" 
            classpath="${launch4j.dir}/launch4j.jar; ${launch4j.dir}/lib/xstream.jar; " />

        <copy todir="windows/work">
            <fileset dir="themes/${theme}/windows/" 
                includes="about.bmp, application.ico, config.xml"/>
        </copy>
        <launch4j configFile="windows/work/config.xml" />
        <delete dir="windows/work" 
            includes="about.bmp, application.ico, config.xml" />

        <!-- cygwin requires html, dll, and exe to have the +x flag -->
        <chmod perm="755">
            <fileset dir="windows/work" includes="**/*.html, **/*.dll, **/*.exe" />
        </chmod>
    </target>

    <target name="windows-run" depends="windows-build" 
        description="Run windows version">
        <exec executable="windows/work/${product}.exe" 
            dir="windows/work" spawn="true"/>
    </target>

    <target name="windows-dist" depends="windows-build" 
        description="Create .zip files of windows version">
        <property name="extension" value="zip"/>   

        <unzip dest="windows/work" src="windows/dist/jre7.zip" overwrite="false"/>

        <zip destfile="windows/${product}-${version}-windows.zip">
            <zipfileset dir="windows/work" prefix="${product}-${version}" filemode="755" />
        </zip>
    
        <echo>
      =======================================================
      ${product.cap} for Windows was built. Grab the archive from   
      
      windows/${product}-${version}-windows.zip
      =======================================================
        </echo>
    </target>
  

  <!-- - - - - - - - -->
  <!-- Source        -->
  <!-- - - - - - - - -->
 
   <target name="source-dist" 
	  description="Build .tar.gz of source code">
    <input message="Enter version number:" 
	   addproperty="version"
	   defaultvalue="${revision}" />

    <tar compression="gzip" longfile="gnu" destfile="${product}-${version}-src.tar.gz">
      <tarfileset dir="../" 
		  prefix="${product}-${version}" 
		  excludes="**/*.tgz,
			     **/macosx/,
			     **/windows/,
			     **/work/,
			     **/.git/,
			     **/*.class"
		  /> 
    </tar>

    <echo>
      =======================================================
      ${product.cap} source distribution was built. Grab the archive from   
      
      ${product}-${version}-src.tar.gz
      =======================================================
    </echo>
  </target>
  

  <!-- - - - - - - - -->
  <!-- Run It!       -->
  <!-- - - - - - - - -->
  
  <target name="clean" description="Perform a spring cleaning" 
	  depends="linux-clean, windows-clean, macosx-clean, subprojects-clean">
  </target>


  <target name="update-avrdude-macosx" description="Update the avrdude configuration to latest version." depends="">
      <copy todir="macosx/work/${product.cap}.app/Contents/Resources/Java/hardware/cores/pic32/tools/avr/etc/">
        <fileset file="macosx/dist/avrdude.conf" />
    </copy>
  </target>

  <target name="update-avrdude-windows" description="Update the avrdude configuration to latest version." depends="">
      <copy todir="windows/work/hardware/cores/pic32/tools/avr/etc/">
        <fileset file="windows/dist/avrdude.conf" />
    </copy>
  </target>
  <!-- not need linux does this already.
    <target name="update-avrdude-linux" description="Update the avrdude configuration to latest version." depends="">
      <copy todir="macosx/work/${product.cap}.app/Contents/Resources/Java/hardware/tools/avr/etc/">
        <fileset file="linux/dist/tools/avrdude.conf" />
    </copy>
  </target>
    -->
   <!-- Task for setting up the aws-ant-tasks -->
    <target name="awstasks.setup">
        <path id="tasks.path">
            <fileset dir="antlibs" includes="*.jar"/>
        </path>

        <taskdef name="s3put" classpath="antlibs" classname="it.corley.ant.S3PutTask"
                 classpathref="tasks.path"/>
        <typedef name="contenttype.mapping" classname="it.corley.ant.ContentTypeMapping" classpathref="tasks.path"/>
        <typedef name="cachecontrol.mapping" classname="it.corley.ant.CacheControlMapping" classpathref="tasks.path"/>
    	<typedef name="contentencoding.mapping" classname="it.corley.ant.ContentEncodingMapping" classpathref="tasks.path"/>
    </target>

    <target name="auto">
        <antcall target="clean" />
        <antcall target="linux-dist" />
        <copy todir="/var/www/uecide/downloads" file="linux/${product}-${version}-linux.zip" overwrite="true" />
        <delete file="linux/${product}-${version}-linux.zip" />

        <antcall target="clean" />
        <antcall target="linux64-dist" />
        <copy todir="/var/www/uecide/downloads" file="linux/${product}-${version}-linux64.zip" overwrite="true" />
        <delete file="linux/${product}-${version}-linux64.zip" />

        <antcall target="clean" />
        <antcall target="macosx-dist" />
        <copy todir="/var/www/uecide/downloads" file="macosx/${product}-${version}-macosx.zip" overwrite="true" />
        <delete file="macosx/${product}-${version}-macosx.zip" />
        <delete file="macosx/${product}-${version}-macosx.dmg" />

        <antcall target="clean" />
        <antcall target="windows-dist" />
        <copy todir="/var/www/uecide/downloads" file="windows/${product}-${version}-windows.zip" overwrite="true" />
        <delete file="windows/${product}-${version}-windows.zip" />

        <antcall target="clean" />

    </target>

    <target name="plugins">
        <subant buildpath="../plugins" target="build"/>
    </target>

</project>
