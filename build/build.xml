<?xml version="1.0"?>
<project name="uecide" default="build">

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="antlibs/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <available file="../.git" type="dir" property="git.present" />

    <condition property="brand" value="default">
        <not>
            <isset property="brand" />
        </not>
    </condition>

    <sequential>
        <property file="version.txt"/>
        <property file="build.settings"/>
        <property name="aws.bucket" value="chipkit" />

        <propertycopy property="suffix" from="${brand}.suffix" />
        <propertycopy property="theme" from="${brand}.theme" />
        <propertycopy property="cores" from="${brand}.cores" />
        <propertycopy property="compilers" from="${brand}.compilers" />
        <propertycopy property="boards" from="${brand}.boards" />
        <propertycopy property="plugins" from="${brand}.plugins" />
        <propertycopy property="publish" from="${brand}.publish" />
        <property file="themes/${theme}/ide/theme.txt"/>
    </sequential>

    <condition property="doPublish"><equals arg1="${publish}" arg2="yes"/></condition>

    <condition property="macosx"><os family="mac" /></condition>
    <condition property="windows"><os family="windows" /></condition>
    <condition property="linux"><os family="unix" /></condition>

    <condition property="platform" value="macosx">
        <os family="mac" />
    </condition>
    <condition property="platform" value="windows">
            <os family="windows" />
    </condition>
    <condition property="platform"  value="linux">
        <os family="unix" />
    </condition>

    <!-- set time propert -->  
    <tstamp>
        <format property="TODAY" pattern="yyyyMMdd" />
    </tstamp>

    <fileset dir=".." id="runtime.jars">
        <include name="core/uecide.jar" />
        <include name="core/lib/jna.jar" />
        <include name="core/lib/jssc.jar" />
        <!--include name="core/lib/ant.jar" /-->
        <!--include name="core/lib/ant-launcher.jar" /-->
    </fileset>

    <target name="build" depends="build.number" description="Build IDE.">
        <echo>
Building for ${brand} version ${version}${suffix}, build ${build.number}
        </echo>
        <antcall target="${platform}-build" />
    </target>

    <target name="dist" description="Build IDE for distribution.">
        <antcall target="${platform}-dist" />
    </target>

    <target name="deb" description="Build IDE for distribution.">
        <antcall target="${platform}-deb" />
    </target>

    <target name="build.number" description="Get GIT commit number" if="git.present">
        <exec executable="git" outputproperty="build.number" failifexecutionfails="false" errorproperty="">
            <arg value="rev-list"/>
            <arg value="HEAD"/>
            <arg value="--count"/>
        </exec>
    </target>

    <target name="subprojects-clean">
        <subant buildpath="../core" target="clean"/>
        <!--subant buildpath="../plugins" target="clean"/-->
    </target>

    <target name="subprojects-build">
        <subant buildpath="../core" target="build"/>
        <!--subant buildpath="../plugins" target="build"/-->
    </target>


    <target name="download-file" if="download.enable">
        <get src="${src}" dest="${dest}" usetimestamp="true" />    
    </target>

    <target name="install_compiler">
        <antcall target="download-file">
            <param name="src" value="http://www.uecide.org/p/compilers/${compiler.name}-${target.platform}.jar" />
            <param name="dest" value="tmp/${compiler.name}-${target.platform}.jar" />
        </antcall>
        <unzip dest="${target.path}/hardware/compilers" src="tmp/${compiler.name}-${target.platform}.jar" overwrite="false" />
        <chmod perm="+x">
            <fileset dir="${target.path}/hardware/compilers/${compiler.name}" includes="**/*" />
        </chmod>
    </target>

    <target name="install_core">
        <antcall target="download-file">
            <param name="src" value="http://www.uecide.org/p/cores/${core.name}.jar" />
            <param name="dest" value="tmp/${core.name}.jar" />
        </antcall>
        <unzip dest="${target.path}/hardware/cores" src="tmp/${core.name}.jar" overwrite="false" />
        <chmod perm="+x">
            <fileset dir="${target.path}/hardware/cores/${core.name}" includes="**/*" />
        </chmod>
    </target>

    <target name="install_plugin">
        <antcall target="download-file">
            <param name="src" value="http://www.uecide.org/p/plugins/${plugin}.jar" />
            <param name="dest" value="tmp/${plugin}.jar" />
        </antcall>
        <copy file="tmp/${plugin}.jar" todir="${target.path}/plugins/"/>
    </target>

    <target name="install_boards">
        <antcall target="download-file">
            <param name="src" value="http://www.uecide.org/p/boards/${boards.name}.jar" />
            <param name="dest" value="tmp/${boards.name}.jar" />
        </antcall>
        <unzip dest="${target.path}/hardware/boards/" src="tmp/${boards.name}.jar" overwrite="false" />
        <chmod perm="+x">
            <fileset dir="${target.path}/hardware/boards/" includes="**/*" />
        </chmod>
    </target>
        
    <target name="assemble">
        <fail unless="target.path" 
            message="Do not call assemble from the command line." />

        <mkdir dir="${target.path}/hardware"/>

        <foreach list="${compilers}" param="compiler.name" target="install_compiler">
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </foreach>

        <foreach list="${cores}" param="core.name" target="install_core">
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </foreach>

        <foreach list="${boards}" param="boards.name" target="install_boards">
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </foreach>

        <foreach list="${plugins}" param="plugin" target="install_plugin">
            <param name="target.path" value="${target.path}"/>
            <param name="target.platform" value="${target.platform}"/>
        </foreach>

        <copy todir="${target.path}/lib/theme/">
            <fileset dir="themes/${theme}/ide/" includes="**/*"/>
        </copy>
    </target>

    <target name="macosx-clean" depends="subprojects-clean" description="Clean Mac OS X build">
        <delete dir="macosx/work" />
        <delete dir="macosx/working_dir" />
        <delete dir="macosx/working.dmg" />
        <delete file="macosx/${product}-*.dmg" />
    </target>
  
  <target name="macosx-build" depends="subprojects-build" description="Build Mac OS X version">
    	<mkdir dir="macosx/work" />
    
    <!-- assemble the uecide -->
    <copy todir="macosx/work">
      <fileset dir="macosx/" includes="template.app/**"/>
    </copy>

    
<!--    <rename src="macosx/work/template.app" 
	    dest="macosx/work/${product.cap}.app" />-->
    <move file="macosx/work/template.app" 
	  tofile="macosx/work/${product.cap}.app" />

    <replace file="macosx/work/${product.cap}.app/Contents/Info.plist" token="{product.cap}" value="${product.cap}" />
    <replace file="macosx/work/${product.cap}.app/Contents/Info.plist" token="{version}" value="${version}${suffix}" />

    <copy file="themes/${theme}/ide/icon.icns" tofile="macosx/work/${product.cap}.app/Contents/Resources/processing.icns" overwrite="true" />

    <chmod file="macosx/work/${product.cap}.app/Contents/MacOS/JavaApplicationStub" perm="755" />
    
    <copy todir="macosx/work/${product.cap}.app/Contents/Resources/Java" flatten="true">
      <fileset refid="runtime.jars"/>
    </copy>
    
    <copy todir="macosx/work/${product.cap}.app/Contents/Resources/Java/lib">
            <fileset file="shared/lib/preferences.txt"/>
            <fileset file="shared/lib/keywords.txt"/>
    </copy>

    <antcall target="assemble">
      <param name="target.path" value="macosx/work/${product.cap}.app/Contents/Resources/Java" />
      <param name="target.platform" value="macosx" />
    </antcall>
  </target>

  <target name="macosx-run" depends="macosx-build" description="Run Mac OS X version">
    <exec executable="macosx/work/${product.cap}.app/Contents/MacOS/JavaApplicationStub" spawn="true"/>
  </target>

  <target name="macosx-debug" depends="macosx-build" description="Run Mac OS X version">
    <exec executable="macosx/work/${product.cap}.app/Contents/MacOS/JavaApplicationStub" spawn="false"/>
  </target>

    <target name="macosx-mkdmg-linux64">
        <antcall target="macosx-mkdmg-linux" />
    </target>

    <target name="macosx-mkdmg-linux">
        <exec executable="genisoimage">
            <arg value="-D" />
            <arg value="-V" />
            <arg value="${product.cap}" />
            <arg value="-no-pad" />
            <arg value="-r" />
            <arg value="-apple" />
            <arg value="-o" />
            <arg value="macosx/${product}-${version}${suffix}-macosx.dmg" />
            <arg value="macosx/work" /> 
        </exec>
    </target>

    <target name="macosx-mkdmg-macosx">
        <exec executable="macosx/mkdmg">
            <arg value="macosx/work" />
            <arg value="${product.cap}" />
			<arg value="macosx/${product}-${version}${suffix}-macosx.dmg" />
        </exec>
    </target>

  <target name="macosx-dist" depends="macosx-build" description="Create a .dmg of the Mac OS X version">

    <!-- now build the dmg -->
    <antcall target="macosx-mkdmg-${platform}" />

    <zip destfile="macosx/${product}-${version}${suffix}-macosx.zip"
         basedir="macosx"
         includes="${product}-${version}${suffix}-macosx.dmg" />

    <echo>
      =======================================================
      ${product.cap} for Mac OS X was built. Grab the image from   
      
      macosx/${product}-${version}${suffix}.zip
      =======================================================
  </echo>

  </target>

  
  <!-- - - - - - - - -->
  <!-- Linux         -->
  <!-- - - - - - - - -->
  
  <target name="linux-clean" depends="subprojects-clean" description="Clean linux version">
    <delete dir="linux/work" />
  </target>
  
  <target name="upgrade-build" depends="subprojects-build" description="Build upgrade version">
    <mkdir dir="upgrade/work" />
    
    <copy todir="upgrade/work/lib">
            <fileset file="shared/lib/preferences.txt"/>
            <fileset file="shared/lib/keywords.txt"/>
    </copy>
    
    <copy todir="upgrade/work/lib" flatten="true">
      <fileset refid="runtime.jars" />
    </copy>
    <copy todir="upgrade/work/lib/theme/">
        <fileset dir="themes/${theme}/ide/" includes="**/*"/>
    </copy>
        <foreach list="${plugins}" param="plugin" target="install_plugin">
            <param name="target.path" value="upgrade/work"/>
        </foreach>
  </target>

  <target name="linux-build" depends="subprojects-build" description="Build linux version">
    <mkdir dir="linux/work" />
    
    <copy todir="linux/work/lib">
            <fileset file="shared/lib/preferences.txt"/>
            <fileset file="shared/lib/keywords.txt"/>
    </copy>
    
    <!--copy todir="linux/work">
      <fileset dir="linux/dist" includes="lib/**" />
    </copy-->

    <copy todir="linux/work/lib" flatten="true">
      <fileset refid="runtime.jars" />
    </copy>
    
    <antcall target="assemble">
      <param name="target.path" value="linux/work" />
      <param name="target.platform" value="linux" />
    </antcall>

    <copy tofile="linux/work/${product}" file="linux/dist/linuxrunner" />
    <chmod perm="755" file="linux/work/${product}" />
  </target>

    <target name="linux32-build" depends="linux-build" description="Build linux (32-bit) version">
    </target>

  <target name="linux-run" depends="linux-build" 
	  description="Run Linux (32-bit) version">
    <exec executable="./linux/work/${product}" spawn="false"/>
  </target>
  

    <target name="upgrade-dist" depends="upgrade-build,build.number"
        description="Build distribution version">
        <zip destfile="upgrade/${product}-${version}${suffix}-upgrade.zip">
            <zipfileset dir="upgrade/work" prefix="${product}-${version}${suffix}" filemode="755"/>
        </zip>
    </target>

    <target name="linux-dist" depends="linux-build,build.number" 
        description="Build .tar.gz of linux version">

        <zip destfile="linux/${product}-${version}${suffix}-linux.zip">
            <zipfileset dir="linux/work" prefix="${product}-${version}${suffix}" filemode="755"/>
        </zip>

        <echo>
      =======================================================
      ${product.cap} for Linux was built. Grab the archive from   
      
      build/linux/${product}-${version}${suffix}-linux.zip
      =======================================================
        </echo>
    </target>

	<target name="linux-generate-debian" depends="build,build.number" description="Build debian tree ready for packaging">
        <property name="proot" value="linux/${product}-${version}${suffix}-${arch}" />
        <mkdir dir="${proot}" />
        <mkdir dir="${proot}/usr" />
        <mkdir dir="${proot}/usr/bin" />
        <mkdir dir="${proot}/usr/share" />
        <mkdir dir="${proot}/usr/share/applications" />
        <mkdir dir="${proot}/usr/share/icons" />

        <copy tofile="${proot}/usr/share/icons/${product}.png" file="themes/${theme}/ide/icon.png" />
        <copy tofile="${proot}/usr/share/icons/${product}_sketch.png" file="themes/${theme}/ide/doc_icon.png" />

        <copy todir="${proot}/usr/share/${product}">
            <fileset dir="linux/work" />
        </copy>
        <chmod perm="755">
            <fileset dir="${proot}/usr/share/${product}" includes="${product}" />
            <fileset dir="${proot}/usr/share/${product}/hardware" includes="**/*" />
        </chmod>
        <symlink link="${proot}/usr/bin/${product}" resource="/usr/share/${product}/${product}" overwrite="true" />

        <echo file="${proot}/usr/share/applications/${product}.desktop">[Desktop Entry]
Name=${product.cap}
Comment=Universal Embedded Computing IDE
Exec=/usr/bin/${product}
Icon=${product}.png
Terminal=false
Type=Application
Categories=Application;Development;Programming;
StartupNotify=false
MimeType=application/x-${product}
</echo>

        <echo file="${proot}/usr/share/${product}/${product}-mime.xml">&lt;?xml version="1.0"?&gt;
&lt;mime-info xmlns='http://www.freedesktop.org/standards/shared-mime-info'&gt;
    &lt;mime-type type="application/x-${product}"&gt;
        &lt;comment&gt;${product.cap} Sketch&lt;/comment&gt;
        &lt;glob pattern="*.pde"/&gt;
        &lt;glob pattern="*.ino"/&gt;
    &lt;/mime-type&gt;
&lt;/mime-info&gt;
</echo>

        <mkdir dir="${proot}/DEBIAN" />
        <echo file="${proot}/DEBIAN/control">Package: ${product}
Version: ${version}${suffix}
Maintainer: matt@majenko.co.uk
Architecture: ${arch}
Section: Programming
Depends: default-jre, extra-xdg-menus, libftdi1, libjna-java
Description: ${product.cap} Development environment

</echo>
        <echo file="${proot}/DEBIAN/postinst">#!/bin/bash
xdg-mime install --novendor /usr/share/${product}/${product}-mime.xml
xdg-icon-resource install --context mimetypes --novendor --size 128 /usr/share/icons/${product}_sketch.png application-x-${product}
xdg-icon-resource install --size 128 --novendor /usr/share/icons/${product}.png
</echo>
        <chmod perm="755">
            <fileset dir="${proot}/DEBIAN" includes="postinst" />
        </chmod>
        <exec executable="fakeroot" dir="linux">
            <arg value="dpkg-deb"/>
            <arg value="-b"/>
            <arg value="${product}-${version}${suffix}-${arch}"/>
        </exec>
        <delete dir="${proot}" />
        <echo>
      =======================================================
      ${product.cap} for Linux was built. Grab the package from   
      
      build/linux/${product}-${version}${suffix}-${arch}.deb
      =======================================================
        </echo>
    </target>


	<target name="linux-deb" depends="linux-build,build.number" description="Build .deb of linux version">
        <property name="arch" value="i386"/>
        <antcall target="linux-generate-debian"/>
    </target>

    <target name="linux64-deb" depends="linux-build,build.number" description="Build .deb of linux version">
        <property name="arch" value="amd64"/>
        <antcall target="linux-generate-debian"/>
    </target>

    <target name="linuxPi-deb" depends="linux-build,build.number" description="Build .deb of linux version">
        <property name="arch" value="armhf"/>
        <antcall target="linux-generate-debian"/>
    </target>

    <target name="upgrade-clean" depends="subprojects-clean">
        <delete dir="upgrade/work"/>
    </target>
  
    <target name="windows-clean" depends="subprojects-clean"
            description="Clean windows version">
        <delete dir="windows/work" />
    </target>
  
    <target name="windows-build" 
        depends="subprojects-build" 
        description="Build windows version">
        <mkdir dir="windows/work" />
    
        <!-- assemble the uecide -->
        <mkdir dir="windows/work/lib" />
        <copy todir="windows/work/lib" flatten="true">
            <fileset refid="runtime.jars" />
        </copy>
    
        <copy todir="windows/work/lib">
            <fileset file="shared/lib/preferences.txt"/>
            <fileset file="shared/lib/keywords.txt"/>
        </copy>
    
        <copy todir="windows/work">
            <fileset dir="windows/dist" includes="*.dll" />
        </copy>

        <copy todir="windows/work">
            <fileset dir="windows/dist" includes="drivers/**" />
        </copy>

        <antcall target="assemble">
            <param name="target.path" value="windows/work" />
            <param name="target.platform" value="windows" />
        </antcall>

        <property name="launch4j.dir" value="windows/launcher/launch4j/" />
        <taskdef name="launch4j" 
            classname="net.sf.launch4j.ant.Launch4jTask" 
            classpath="${launch4j.dir}/launch4j.jar; ${launch4j.dir}/lib/xstream.jar; " />

        <copy todir="windows/work">
            <fileset dir="themes/${theme}/windows/" 
                includes="application.ico, config.xml"/>
        </copy>
        <launch4j configFile="windows/work/config.xml" />
        <delete dir="windows/work" 
            includes="application.ico, config.xml" />
        <copy todir="windows/work" file="windows/dist/debug.bat"/>

        <!-- cygwin requires html, dll, and exe to have the +x flag -->
        <chmod perm="755">
            <fileset dir="windows/work" includes="**/*.html, **/*.dll, **/*.exe, **/*.bat" />
        </chmod>
    </target>

    <target name="windows-run" depends="windows-build" 
        description="Run windows version">
        <exec executable="windows/work/${product}.exe" 
            dir="windows/work" spawn="true"/>
    </target>

    <target name="windows-installer">
        <copy todir="windows" file="windows/dist/script.nsi" />
        <replace file="windows/script.nsi" token="%VERSION%" value="${version}${suffix}-${itype}" />
        <replace file="windows/script.nsi" token="%PRODUCT%" value="${product}" />
        <replace file="windows/script.nsi" token="%PRODUCTCAP%" value="${product.cap}" />
        <replace file="windows/script.nsi" token="%PUBLISHER%" value="${publisher}" />
        <replace file="windows/script.nsi" token="%THEME%" value="${theme}" />
        <exec executable="makensis">
            <arg value="windows/script.nsi"/>
        </exec>
        <delete file="windows/script.nsi" />
    </target>

    <target name="windows-dist-lite" depends="windows-build,build.number" 
        description="Create .zip files of windows version">

        <zip destfile="windows/${product}-${version}${suffix}-windows-lite.zip">
            <zipfileset dir="windows/work" prefix="${product}-${version}${suffix}" filemode="755" />
        </zip>
        <antcall target="windows-installer">
            <param name="itype" value="lite" />
        </antcall>
    </target>
  
    <target name="windows-dist" depends="windows-build,build.number" 
        description="Create .zip files of windows version">

        <unzip dest="windows/work" src="windows/dist/jre7.zip" overwrite="false"/>

        <zip destfile="windows/${product}-${version}${suffix}-windows.zip">
            <zipfileset dir="windows/work" prefix="${product}-${version}${suffix}" filemode="755" />
        </zip>
        <antcall target="windows-installer">
            <param name="itype" value="full" />
        </antcall>
    </target>
  
    <target name="clean" description="Perform a spring cleaning" 
        depends="upgrade-clean, linux-clean, windows-clean, macosx-clean, subprojects-clean">
    </target>

    <target name="update-avrdude-macosx" description="Update the avrdude configuration to latest version." depends="">
        <copy todir="macosx/work/${product.cap}.app/Contents/Resources/Java/hardware/cores/pic32/tools/avr/etc/">
            <fileset file="macosx/dist/avrdude.conf" />
        </copy>
    </target>

    <target name="update-avrdude-windows" description="Update the avrdude configuration to latest version." depends="">
        <copy todir="windows/work/hardware/cores/pic32/tools/avr/etc/">
            <fileset file="windows/dist/avrdude.conf" />
        </copy>
    </target>

    <target name="awstasks.setup">
        <path id="tasks.path">
            <fileset dir="antlibs" includes="*.jar"/>
        </path>

        <taskdef name="s3put" classpath="antlibs" classname="it.corley.ant.S3PutTask"
                 classpathref="tasks.path"/>
        <typedef name="contenttype.mapping" classname="it.corley.ant.ContentTypeMapping" classpathref="tasks.path"/>
        <typedef name="cachecontrol.mapping" classname="it.corley.ant.CacheControlMapping" classpathref="tasks.path"/>
    	<typedef name="contentencoding.mapping" classname="it.corley.ant.ContentEncodingMapping" classpathref="tasks.path"/>
    </target>

    <target name="publish" if="doPublish">
        <exec executable="reprepro">
            <arg value="-b" />
            <arg value="/var/www/dist" />
            <arg value="--section" />
            <arg value="development" />
            <arg value="-C" />
            <arg value="contrib" />
            <arg value="--priority" />
            <arg value="optional" />
            <arg value="includedeb" />
            <arg value="${distro}" />
            <arg value="${file}" />
        </exec>
    </target>

    <target name="publish-all">
        <foreach list="sarge,lucid,maverick,natty,oneiric,precise,quantal,raring,saucy" param="distro" target="publish">
            <param name="file" value="${file}"/>
        </foreach>
    </target>

    <target name="tt">
        <antcall target="publish-all">
            <param name="file" value="linux/${product}-${version}${suffix}-armhf.deb" />
        </antcall>
    </target>

    <target name="linux-auto">
        <antcall target="clean" />
        <antcall target="linux-dist" />
        <copy todir="/var/www/uecide/downloads" file="linux/${product}-${version}${suffix}-linux.zip" overwrite="true" />
        <delete file="linux/${product}-${version}${suffix}-linux.zip" />
        <antcall target="linux-deb" />
        <copy todir="/var/www/uecide/downloads" file="linux/${product}-${version}${suffix}-i386.deb" overwrite="true" />
        <antcall target="publish-all">
            <param name="file" value="linux/${product}-${version}${suffix}-i386.deb" />
        </antcall>
        <delete file="linux/${product}-${version}${suffix}-i386.deb" />
        <antcall target="linux64-deb" />
        <copy todir="/var/www/uecide/downloads" file="linux/${product}-${version}${suffix}-amd64.deb" overwrite="true" />
        <antcall target="publish-all">
            <param name="file" value="linux/${product}-${version}${suffix}-amd64.deb" />
        </antcall>
        <delete file="linux/${product}-${version}${suffix}-amd64.deb" />
        <antcall target="linuxPi-deb" />
        <copy todir="/var/www/uecide/downloads" file="linux/${product}-${version}${suffix}-armhf.deb" overwrite="true" />
        <antcall target="publish-all">
            <param name="file" value="linux/${product}-${version}${suffix}-armhf.deb" />
        </antcall>
        <delete file="linux/${product}-${version}${suffix}-armhf.deb" />
    </target>

    <target name="macosx-auto">
        <antcall target="clean" />
        <antcall target="macosx-dist" />
        <copy todir="/var/www/uecide/downloads" file="macosx/${product}-${version}${suffix}-macosx.zip" overwrite="true" />
        <delete file="macosx/${product}-${version}${suffix}-macosx.zip" />
        <delete file="macosx/${product}-${version}${suffix}-macosx.dmg" />
    </target>

    <target name="windows-auto">
        <antcall target="clean" />
        <antcall target="windows-dist" />
        <copy todir="/var/www/uecide/downloads" file="windows/${product}-${version}${suffix}-windows.zip" overwrite="true" />
        <copy todir="/var/www/uecide/downloads" file="windows/${product}-${version}${suffix}-full.exe" overwrite="true" />
        <delete file="windows/${product}-${version}${suffix}-windows.zip" />
        <delete file="windows/${product}-${version}${suffix}-full.exe" />
    </target>

    <target name="windows-lite-auto">
        <antcall target="clean" />
        <antcall target="windows-dist-lite" />
        <copy todir="/var/www/uecide/downloads" file="windows/${product}-${version}${suffix}-windows-lite.zip" overwrite="true" />
        <copy todir="/var/www/uecide/downloads" file="windows/${product}-${version}${suffix}-lite.exe" overwrite="true" />
        <delete file="windows/${product}-${version}${suffix}-windows-lite.zip" />
        <delete file="windows/${product}-${version}${suffix}-lite.exe" />
    </target>

    <target name="auto">
        <antcall target="windows-lite-auto" />
        <antcall target="windows-auto" />
        <antcall target="linux-auto" />
        <antcall target="macosx-auto" />
        <antcall target="clean" />
    </target>

    <!--target name="plugins">
        <subant buildpath="../plugins" target="build"/>
    </target-->

</project>
